/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package lapr.project.ui.AssignStands;

import javax.swing.DefaultListModel;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import lapr.project.controller.AssignStandsController;
import lapr.project.model.Application;
import lapr.project.model.AssignStands;
import lapr.project.model.Event;
import lapr.project.model.Stand;

/**
 *
 * @author Jo√£o Domingues
 */
public class AssignStandsMainUI extends javax.swing.JFrame {
    
    AssignStandsController controller;
    DefaultListModel modelEvents;
    DefaultListModel modelApplications;
    DefaultListModel modelStands;
    DefaultListModel modelAssignment;
    JFrame parent;

    /** Creates new form AssignStandsMain */
    public AssignStandsMainUI() {
        initComponents();
    }
    
    /**
     * param  controller
     * Creates new form DefineFAEMainUI
     * param controller
     */
    public AssignStandsMainUI(JFrame parent, AssignStandsController controller) {
        this.controller = controller;
        this.parent = parent;
        initComponents();
        ListModel model = new DefaultListModel();
        this.listEvent.setModel(model);
        prepareEventsList();
        setLocationRelativeTo(null);
        pack();
        this.setVisible(true);
        
         setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                close();
            }

        });
      
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listEvent = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listApplication = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        listStand = new javax.swing.JList<>();
        confirmEvent = new javax.swing.JButton();
        confirmApplication = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        confirmOperation = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listAssign = new javax.swing.JList<>();
        confirmStand = new javax.swing.JButton();
        newAssignment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel1.setText("Select an event");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setText("Application");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel3.setText("Stand");

        jScrollPane1.setViewportView(listEvent);

        jScrollPane2.setViewportView(listApplication);

        jScrollPane3.setViewportView(listStand);

        confirmEvent.setText("Confirm Event");
        confirmEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmEventActionPerformed(evt);
            }
        });

        confirmApplication.setText("ConfirmApplication");
        confirmApplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmApplicationActionPerformed(evt);
            }
        });

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        confirmOperation.setText("Confirm");
        confirmOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmOperationActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel4.setText("Assignment List:");

        jScrollPane4.setViewportView(listAssign);

        confirmStand.setText("Confirm Stand");
        confirmStand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmStandActionPerformed(evt);
            }
        });

        newAssignment.setText("New Assignment");
        newAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAssignmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(68, 68, 68)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confirmStand)
                            .addComponent(newAssignment)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(btnReturn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(confirmOperation))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(confirmEvent)
                                    .addGap(30, 30, 30))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(119, 119, 119)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(confirmApplication, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3)
                                    .addGap(39, 39, 39))))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(confirmEvent))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(confirmApplication))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(confirmStand)
                                .addGap(18, 18, 18)
                                .addComponent(newAssignment)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReturn)
                            .addComponent(confirmOperation))
                        .addGap(33, 33, 33))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmEventActionPerformed
        int selectedindex = listEvent.getSelectedIndex();
        if (selectedindex != -1) {
            listEvent.setEnabled(false);
            confirmEvent.setEnabled(false);
            controller.setEventSelect(controller.getEventsList().get(selectedindex));
            prepareApplicationsList();
        }    
    }//GEN-LAST:event_confirmEventActionPerformed

    private void confirmApplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmApplicationActionPerformed
        int selectedindex = listApplication.getSelectedIndex();
        if (selectedindex != -1) {
            listApplication.setEnabled(false);
            controller.setApplicationSelect(controller.getAppicationsList().get(selectedindex));
            this.listApplication.setEnabled(false);
            this.confirmApplication.setEnabled(false);
            prepareStandList();
        }    
    }//GEN-LAST:event_confirmApplicationActionPerformed

    private void confirmStandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmStandActionPerformed
        int selectedindex = listStand.getSelectedIndex();
        if (selectedindex != -1) {
            listStand.setEnabled(false);
            controller.setStandSelect(controller.getStandsList().get(selectedindex));
            this.listStand.setEnabled(false);
            this.confirmStand.setEnabled(false);
            prepareAssignmentList();
        }    
    }//GEN-LAST:event_confirmStandActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        close();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void confirmOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmOperationActionPerformed
        if (listAssign.getModel().getSize() > 0) {
            JOptionPane.showMessageDialog(null, "Assign Stands successfully defined!");
            dispose();
            parent.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Assign Stands was not defined successfully!");
        }
    }//GEN-LAST:event_confirmOperationActionPerformed

    private void newAssignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAssignmentActionPerformed
        listApplication.setEnabled(true);
        listStand.setEnabled(true);
        this.confirmApplication.setEnabled(true);
        this.confirmStand.setEnabled(true);
        this.newAssignment.setEnabled(false);
    }//GEN-LAST:event_newAssignmentActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AssignStandsMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AssignStandsMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AssignStandsMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssignStandsMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AssignStandsMainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton confirmApplication;
    private javax.swing.JButton confirmEvent;
    private javax.swing.JButton confirmOperation;
    private javax.swing.JButton confirmStand;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> listApplication;
    private javax.swing.JList<String> listAssign;
    private javax.swing.JList<String> listEvent;
    private javax.swing.JList<String> listStand;
    private javax.swing.JButton newAssignment;
    // End of variables declaration//GEN-END:variables

    
    private void prepareEventsList() {
        List<Event> events = this.controller.getEventsList();
        modelEvents = new DefaultListModel();
        for (Event event : events) {
            modelEvents.addElement(event);
        }
        this.listEvent.setModel(modelEvents);
    }
    
    private void prepareApplicationsList() {
        List<Application> applications = this.controller.generateApplicationsList(this.controller.getEventSelect());
        modelApplications = new DefaultListModel();
        for (Application a : applications) {
            modelApplications.addElement(a);
        }
        this.listApplication.setModel(modelApplications);
        this.listApplication.setEnabled(true);
        this.confirmApplication.setEnabled(true);
    }
    
    private void prepareStandList(){
        List<Stand>  stands = this.controller.getStands(this.controller.getEventSelect());
        modelStands = new DefaultListModel();
        for (Stand s : stands) {
            modelStands.addElement(s);
        }
        this.listStand.setModel(modelStands);
        this.listStand.setEnabled(true);
        this.confirmStand.setEnabled(true);   
    }
    
    private void prepareAssignmentList(){
        Stand stand = this.controller.getStandSelected();
        Application a = this.controller.getApplicationSelected();
        
        AssignStands as = this.controller.createAssignment(stand, a);
        
        boolean validate = this.controller.validate(as);
        
        controller.AssignStand(validate, as);
        
        List<AssignStands> assignstands = this.controller.getStandsAssigned();

        modelAssignment = new DefaultListModel();
        for (AssignStands astands : assignstands) {
            modelAssignment.addElement(astands);
        }
        this.listAssign.setModel(modelAssignment);
        this.newAssignment.setEnabled(true);
        this.confirmOperation.setEnabled(true);
    }
    
    private void close() {
        String[] opYesNo = {"Yes", "No"};
        int answer = JOptionPane.showOptionDialog(this,
                "Do you want to cancel the Assign Stands process?",
                "Application of Lapr",
                0,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opYesNo,
                opYesNo[1]);

        final int Yes = 0;
        if (answer == Yes) {
            dispose();
            parent.setVisible(true);
        } else {

        }
    }
}
